If(True, a, b) -> Inst(a)
If(False, a, b) -> Inst(b)
Inst(#If(cond, a, b)) -> If(cond, a, b)

=(True, True) -> True
=(True, False) -> False
=(False, True) -> False
=(False, False) -> True

Not(Not(q)) -> q
Not(True) -> False
Not(False) -> True

And(a, b) -> If(a, b, False)
Or(a, b) -> If(a, True, b)

1 -> S(0)
2 -> S(1)
3 -> S(2)
4 -> S(3)
5 -> S(4)
6 -> S(5)
7 -> S(6)
8 -> S(7)
9 -> S(8)
10 -> S(9)

|(0, x) -> x
|(a, b) -> +(b, *(a, 10))

=(0, 0) -> True
=(S(a), S(b)) -> =(a, b)
=(0, S(b)) -> False
=(S(a), 0) -> False
=(S(a), P(b)) -> False

<(0, 0) -> False
<(S(a), 0) -> False
<(0, S(b)) -> True
<(S(a), S(b)) -> <(a, b)
<(P(a), P(b)) -> <(a, b)
<(S(a), P(b)) -> False
<(P(a), S(b)) -> True

>(a, b) -> <(b, a)
>=(a, b) -> Or(>(a, b), =(a, b))
<=(a, b) -> Not(>(a, b))

~(n) -> ~'(n, 0)
~'(n, acc) -> If(>(n, 0), #~'(P(n), P(acc)), acc)
Inst(#~'(n, acc)) -> ~'(n, acc)

+(a, 0) -> a
+(0, b) -> b
+(a, S(b)) -> S(+(a, b))
+(S(a), b) -> S(+(a, b))
+(S(a), P(b)) -> +(a, b)
+(P(a), S(b)) -> +(a, b)

-(a, b) -> +(a, ~(b))

P(S(n)) -> n
S(P(n)) -> n

*(a, 0) -> 0
*(0, b) -> 0
*(a, S(b)) -> +(a, *(a, b))
*(S(a), b) -> +(b, *(a, b))

**(0, 0) -> Error
**(a, 0) -> 1
**(0, b) -> 0
**(1, b) -> 1
**(a, 1) -> a
**(a, S(b)) -> *(a, **(a, b))

/(a, 0) -> Error
/(a, 1) -> a
/(a, b) -> /'(a, b, 0)
/'(a, b, i) ->
    If(>=(a, b),
        #/'(-(a, b), b, S(i)),
        DivRes(i, a)
    )
Inst(#/'(a, b, i)) -> /'(a, b, i)

Quotient(DivRes(q, r)) -> q
Rem(DivRes(q, r)) -> r

Mod(a, b) -> Rem(/(a, b))

IsEven(n) -> =(Mod(n, 2), 0)

IsPrime(2) -> True
IsPrime(3) -> True
IsPrime(n) -> 
    If(<(n, 2),
        False,
        #If(IsEven(n),
            False,
            #IsPrime'(n, 3)
        )
    )
IsPrime'(n, i) ->
    If(<=(*(i, i), n),
        #If(=(Mod(n, i), 0),
            False,
            #IsPrime'(n, +(i, 2))
        ),
        True
    )

Inst(#IsPrime'(n, i)) -> IsPrime'(n, i)

Primes(n) -> Primes'(n, 3, :(2, Nil))
Primes'(n, i, primes) -> 
    If(<=(i, n),
        #If(IsPrime(i),
            #Primes'(n, +(i, 2), :(i, primes)),
            #Primes'(n, +(i, 2), primes)
        ),
        primes
    )
Inst(#Primes'(n, i, primes)) -> Primes'(n, i, primes)

Len(Nil) -> 0
Len(:(h, tl)) -> +(Len(tl), 1)

Reverse(lst) -> Reverse'(lst, Nil)
Reverse'(Nil, rev) -> rev
Reverse'(:(h, tl), rev) -> Reverse'(tl, :(h, rev))

N(0) -> 0'
N(S(0)) -> 1'
N(S(S(0))) -> 2'
N(S(S(S(0)))) -> 3'
N(S(S(S(S(0))))) -> 4'
N(S(S(S(S(S(0)))))) -> 5'
N(S(S(S(S(S(S(0))))))) -> 6'
N(S(S(S(S(S(S(S(0)))))))) -> 7'
N(S(S(S(S(S(S(S(S(0))))))))) -> 8'
N(S(S(S(S(S(S(S(S(S(0)))))))))) -> 9'

N(n) -> Reverse(N'(n, Nil))
N'(0, acc) -> acc
N'(n, acc) -> N''(/(n, 10), acc)
N''(DivRes(q, r), acc) -> :(N(r), N'(q, acc))

N(Nil) -> Nil
N(:(h, tl)) -> :(N(h), N(tl))

App(N, a) -> N(a)

Map(f, lst) -> Map'(f, lst, Nil)
Map'(f, Nil, acc) -> Reverse(acc)
Map'(f, :(h, tl), acc) -> Map'(f, tl, :(App(f, h), acc))

Inst(x) -> x

Query -> Map(N, Primes(|(5, 0)))