export declare type Left_<L> = [L, 'left'];
export declare type Right_<R> = [R, 'right'];
export declare type Either<L, R> = Left_<L> | Right_<R>;
export declare type Result<T, E> = Either<T, E>;
export declare function Left<L, R>(value: L): Left_<L>;
export declare const Ok: typeof Left;
export declare function Right<L, R>(value: R): Right_<R>;
export declare const Err: typeof Right;
export declare function isLeft<L, R>(value: Either<L, R>): value is Left_<L>;
export declare const isOk: typeof isLeft;
export declare function isRight<L, R>(value: Either<L, R>): value is Right_<R>;
export declare const isError: typeof isRight;
export declare function either<L, R, T>(value: Either<L, R>, onLeft: (value: L) => T, onRight: (value: R) => T): T;
export declare function mapEither<L, R, T>(value: Either<L, R>, fn: (left: L) => T): Either<T, R>;
declare type UnwrapReturnType<E extends Either<any, any>> = E extends Left_<infer L> ? L : E extends Right_<infer R> ? R : never;
export declare function unwrap<E extends Either<any, any>>([value, _]: E): UnwrapReturnType<E>;
export {};
