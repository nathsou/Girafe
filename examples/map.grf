import "arith.grf"
import "lists.grf"

// based on http://groups.csail.mit.edu/mac/users/adams/BB/

Size(EmptyMap) -> 0
Size(T(v, count, l, r)) -> count

N(v, l, r) -> T(v, +(1, +(Size(l), Size(r))), l, r)
Inst(&N(v, l, r)) -> N(v, l, r)

Lookup(x, EmptyMap) -> None
Lookup(x, T(v, count, l, r)) -> 
    If(<(x, v),
        &Lookup(x, l),
        &If(>(x, v),
            &Lookup(x, r),
            Some(v)
        )
    )
Inst(&Lookup(x, map)) -> Lookup(x, map)

IsSome(None) -> False
IsSome(Some(x)) -> True

Has(x, map) -> IsSome(Lookup(x, map))

RotateSingleLeft(a, x, T(b, count, y, z)) -> N(b, N(a, x, y), z)
&RotateSingleLeft(a, x, t) -> RotateSingleLeft(a, x, t)
RotateSingleRight(b, T(a, count, x, y), z) -> N(a, x, N(b, y, z))
&RotateSingleRight(b, t, z) -> RotateDoubleRight(b, t, z)

RotateDoubleLeft(a, x, T(c, count, T(b, count2, y1, y2), z)) ->
    N(b, N(a, x, y1), N(c, y2, z))
&RotateDoubleLeft(a, x, t) -> RotateDoubleLeft(a, x, t)

RotateDoubleRight(c, T(a, count1, x, T(b, count2, y1, y2)), z) ->
    N(b, N(a, x, y1), N(c, y2, z))
&RotateDoubleRight(c, t, z) -> RotateDoubleRight(c, t, z)

T'(v, l, r) -> T''(Size(l), Size(r), v, l, r)
T''(ln, rn, v, l, r) -> 
    If(<(+(ln, rn), 2),
        &N(v, l, r),
        &If(>(rn, *(2, ln)), // right is too big
            &TR(r, v, l, r),
            &If(>(ln, *(2, rn)), // left is too big
                &TL(l, v, l, r),
                &N(v, l, r)
            )
        )
    )
&T'(v, l, r) -> T'(v, l, r)
    
TR(T(x, count, rl, rr), v, l, r) ->
    If(<(Size(rl), Size(rr)),
        &RotateSingleLeft(v, l, r),
        &RotateDoubleLeft(v, l, r)
    )
Inst(&TR(t, v, l, r)) -> TR(t, v, l, r)

TL(T(x, count, ll, lr), v, l, r) ->
    If(<(Size(lr), Size(ll)),
        &RotateSingleRight(v, l, r),
        &RotateDoubleRight(v, l, r)
    )
Inst(&TL(t, v, l, r)) -> TL(t, v, l, r)

Ins(EmptyMap, x) -> T(x, 1, EmptyMap, EmptyMap)
Ins(T(v, count, l, r), x) -> 
    If(<(x, v),
        &T'(v, Ins(l, x), r),
        &If(<(v, x),
            &T'(v, l, Ins(r, x)),
            T(v, count, l, r)
        )
    )

Q -> Ins(Ins(Ins(Ins(EmptyMap, 3), 7), 11), 19)

App(App(InsertMap, x), map) -> Ins(map, x)

BuildMap(vals) -> Foldl(InsertMap, EmptyMap, vals)

Inst(x) -> x