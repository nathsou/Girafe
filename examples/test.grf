If(True, a?, b?) -> a
If(False, a?, b?) -> b

Or(True, b?) -> True
Or(a?, True) -> True
Or(a?, b?) -> If(a, True, b)

And(a?, False) -> False
And(False, b?) -> False
And(a?, b?) -> If(a, b, False)

Not(True?) -> False
Not(False?) -> True
Not(Not(q)?) -> q

Trace(query?) -> @trace(query?)

+(a, b) -> @add(a, b)
-(a, b) -> @sub(a, b)
*(a, b) -> @mult(a, b)
/(a, b) -> @div(a, b)
%(a, b) -> @mod(a, b)
=(a, b) -> @equ(a, b)
>(a, b) -> @gtr(a, b)
>=(a, b) -> @geq(a, b)
<(a, b) -> @lss(a, b)
<=(a, b) -> @leq(a, b)

Range(n) -> Range'(n, Nil)
Range'(0, rng) -> :(0, rng)
Range'(n, rng) -> Range'(-(n, 1), :(n, rng))

Len(lst) -> Len'(lst, 0)
Len'(Nil, n) -> n
Len'(:(h, tl), n) -> Len'(tl, +(n, 1))

Divisible(a, b) -> =(%(a, b), 0)

IsPrime(2) -> True
IsPrime(n) -> If(Or(<(n, 2), Divisible(n, 2)), False, IsPrime'(n, 3, Maybe))

IsPrime'(n, i, Maybe) -> IsPrime'(
    n,
    +(i, 2),
    If(>(*(i, i), n),
        True,
        If(Divisible(n, i),
            False,
            Maybe
        )
    )
)

IsPrime'(n, i, ans) -> ans

Factorize(1) -> Nil
Factorize(2) -> :(2, Nil)
Factorize(n) -> 
        If(Divisible(n, 2),
            :(2, Factorize(/(n, 2))),
            Factorize'(n, 3, Nil)
        )

Factorize'(n, i) ->
    If(<=(*(i, i), n),
        If(Divisible(n, i),
            :(i, Factorize(/(n, i))),
            Factorize'(n, +(i, 2))
        ),
        :(n, Nil) // n is prime
    )

PrevOdd(n) -> If(Divisible(n, 2), -(n, 1), n)

PrimesLessThan(n) -> If(<(n, 2), Nil, PrimesLessThan'(PrevOdd(n), Nil))
PrimesLessThan'(3, ps) -> :(2, :(3, ps))
PrimesLessThan'(n, ps) -> PrimesLessThan'(-(n, 2), If(IsPrime(n), :(n, ps), ps))

RangeIt(n) -> It(n, RangeIt(-(n, 1))?)
RangeIt(0) -> It(0, EmptyIt)

Next(It(val, next)) -> next

Rev(lst) -> Rev'(lst, Nil)
Rev'(:(h, tl), rev) -> Rev'(tl, :(h, rev))
Rev'(Nil, rev) -> rev

Take(n, it) -> Take'(n, it, Nil)
Take'(x, EmptyIt, acc) -> acc
Take'(n, It(val, next), acc) -> Take'(-(n, 1), next, :(val, acc))
Take'(0, It(val, next), acc) -> acc

App(Inc, n) -> +(n, 1)

Map(It(h, tl), f) -> It(App(f, h), Map(tl, f))
Map(EmptyIt, f) -> EmptyIt
Map(lst, f) -> Map'(lst, f, Nil)
Map'(Nil, f, acc) -> Rev(acc)
Map'(:(h, tl), f, acc) -> Map'(tl, f, :(App(f, h), acc))