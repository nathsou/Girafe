If(True, a, b) -> Inst(a)
If(False, a, b) -> Inst(b)
// If(cond, a, a) -> Inst(a)

Not(True) -> False
Not(False) -> True
Not(Not(q)) -> q

And(False, False) -> False
And(False, True) -> False
And(True, False) -> False
And(True, True) -> True

Or(False, False) -> False
Or(False, True) -> True
Or(True, False) -> True
Or(True, True) -> True

+(a, b) -> @add(a, b)
-(a, b) -> @sub(a, b)
*(a, b) -> @mult(a, b)
/(a, b) -> @div(a, b)
%(a, b) -> @mod(a, b)
=(a, b) -> @equ(a, b)
>(a, b) -> @gtr(a, b)
>=(a, b) -> @geq(a, b)
<(a, b) -> @lss(a, b)
<=(a, b) -> @leq(a, b)

Range(n) -> Range'(n, Nil)
Range'(0, rng) -> :(0, rng)
Range'(n, rng) -> Range'(-(n, 1), :(n, rng))

Len(lst) -> Len'(lst, 0)
Len'(Nil, n) -> n
Len'(:(h, tl), n) -> Len'(tl, +(n, 1))

Divisible(a, b) -> =(%(a, b), 0)

IsPrime(2) -> True
IsPrime(n) -> If(Or(<(n, 2), Divisible(n, 2)), False, #IsPrime'(n, 3))

Inst(#IsPrime'(n, i)) -> IsPrime'(n, Inst(i))
Inst(#If(a, b, c)) -> If(Inst(a), b, c)
Inst(#Divisible(a, b)) -> Divisible(a, b)
Inst(#+(a, b)) -> +(a, b)
Inst(x) -> x

IsPrime'(n, i) ->
    If(>(*(i, i), n),
        True,
        #If(#Divisible(n, i),
            False,
            #IsPrime'(n, #+(i, 2))
        )
    )

Inst(#:(h, tl)) -> :(Inst(h), Inst(tl))
Inst(#Factorize(n)) -> Factorize(Inst(n))
Inst(#Factorize'(n, i)) -> Factorize'(n, Inst(i))
Inst(#/(a, b)) -> /(Inst(a), Inst(b))

Factorize(2) -> :(2, Nil)
Factorize(n) -> 
        If(Divisible(n, 2),
            #:(2, #Factorize(#/(n, 2))),
            #Factorize'(n, 3)
        )

Factorize'(n, i) ->
    If(<=(*(i, i), n),
        #If(Divisible(n, i),
            #:(i, #Factorize(/(n, i))),
            #Factorize'(n, #+(i, 2))
        ),
        :(n, Nil) // n is prime
    )

PrevOdd(n) -> If(Divisible(n, 2), #-(n, 1), n)
Inst(#PrevOdd(n)) -> PrevOdd(Inst(n))

PrimesLessThan(n) -> If(<(n, 2), Nil, #PrimesLessThan'(#PrevOdd(n), Nil))
Inst(#PrimesLessThan'(n, ps)) -> PrimesLessThan'(Inst(n), ps)
Inst(#-(a, b)) -> -(Inst(a), Inst(b))
PrimesLessThan'(3, ps) -> :(2, :(3, ps))
PrimesLessThan'(n, ps) -> 
    If(IsPrime(n),
        #PrimesLessThan'(#-(n, 2), :(n, ps)),
        #PrimesLessThan'(#-(n, 2), ps)
    )

Filter(as, f) -> Filter'(as, f, Nil)
Filter'(Nil, f, filtered) -> filtered
Filter'(:(h, tl), f, filtered) -> Filter'(tl, f, If(App(f, h), :(h, filtered), filtered))

App(IsDivisibleBy3Or5, n) -> Or(Divisible(n, 3), Divisible(n, 5))

Sum(as) -> Sum'(as, 0)
Sum'(Nil, sum) -> sum
Sum'(:(h, tl), sum) -> Sum'(tl, +(h, sum))

Fib(a, b) -> Iter(#Fib(b, +(a, b)), +(a, b))
Inst(#Fib(a, b)) -> Fib(a, b)

Take(iter, n) -> Take'(iter, n, Nil)
Take'(iter, 0, lst) -> lst
Take'(EmptyIter, n, lst) -> lst
Take'(Iter(next, val), n, lst) -> Take'(Inst(next), -(n, 1), :(val, lst))

TakeWhile(iter, pred) -> TakeWhile'(iter, pred, Nil)
TakeWhile'(EmptyIter, pred, lst) -> lst
TakeWhile'(Iter(next, val), pred, lst) -> If(App(pred, val), #TakeWhile'(Inst(next), pred, :(val, lst)), lst)
Inst(#TakeWhile'(iter, pred, lst)) -> TakeWhile'(iter, pred, lst)

App(IsEven, n) -> =(%(n, 2), 0)
App(App(Lss, a), b) -> <(b, a)

Max(Nil) -> EmptyListMaxError
Max(:(h, tl)) -> Max'(tl, h)
Max'(Nil, max) -> max
Max'(:(h, tl), max) -> Max'(tl, If(>(h, max), h, max))

Digits(n) -> Digits'(n, Nil)
Digits'(0, digits) -> digits
Digits'(n, digits) -> Digits'(/(n, 10), :(%(n, 10), digits))

Reverse(lst) -> Reverse'(lst, Nil)
Reverse'(Nil, rev) -> rev
Reverse'(:(h, tl), rev) -> Reverse'(tl, :(h, rev))

IsPalindrome(lst) -> IsPalindrome'(lst, Reverse(lst))
IsPalindrome'(Nil, Nil) -> True
IsPalindrome'(Nil, rev) -> False
IsPalindrome'(lst, Nil) -> False
IsPalindrome'(:(h1, tl1), :(h2, tl2)) -> If(=(h1, h2), #IsPalindrome'(tl1, tl2), False)
Inst(#IsPalindrome'(lst, rev)) -> IsPalindrome'(lst, rev)

Range2(from, to) -> Range2'(from, to, Nil)
Range2'(from, n, rng) -> If(<=(n, from), :(from, rng), #Range2'(from, -(n, 1), :(n, rng)))
Inst(#Range2'(from, n, rng)) -> Range2'(from, n, rng)

Zip(as, bs) -> Zip'(as, bs, Nil)
Zip'(Nil, bs, zipped) -> Reverse(zipped)
Zip'(as, Nil, zipped) -> Reverse(zipped)
Zip'(:(a, as), :(b, bs), zipped) -> Zip'(as, bs, :(Pair(a, b), zipped))

Map(lst, f) -> Map'(lst, f, Nil)
Map'(Nil, f, mapped) -> mapped
Map'(:(h, tl), f, mapped) -> Map'(tl, f, :(App(f, h), mapped))

App(MultPair, Pair(a, b)) -> *(a, b)
App(IsPalindromic, n) -> IsPalindrome(Digits(n))

Combinations(as, bs) -> Combinations'(Reverse(as), Reverse(bs), Nil)
Combinations'(Nil, bs, combs) -> combs
Combinations'(as, Nil, combs) -> Nil

AppendCombs(a, :(b, bs), combs) -> AppendCombs(a, bs, :(Pair(a, b), combs))
AppendCombs(a, Nil, combs) -> combs

Combinations'(:(a, as), bs, combs) -> Combinations'(as, bs, AppendCombs(a, bs, combs))

// Fib(a, b) -> Iter(#Fib(b, +(a, b)), +(a, b))
// Inst(#Fib(a, b)) -> Fib(a, b)

// Take(iter, n) -> Take'(iter, n, Nil)
// Take'(iter, 0, lst) -> lst
// Take'(EmptyIter, n, lst) -> lst
// Take'(Iter(next, val), n, lst) -> Take'(Inst(next), -(n, 1), :(val, lst))

CombinationsIter(as, bs) -> CombinationsIter'(as, bs)
CombinationsIter'(EmptyIter, bs) -> EmptyIter
CombinationsIter'(as, EmptyIter) -> EmptyIter
CombinationsIter'(Iter(as, a), bs) -> Combs(a, bs, #CombinationsIter(Inst(as), bs))
Inst(#CombinationsIter(as, bs)) -> CombinationsIter(as, bs)

Combs(a, bs, nextIter) -> Combs'(a, bs, nextIter)
Combs'(a, EmptyIter, nextIter) -> Inst(nextIter)
Combs'(a, Iter(bs, b), nextIter) -> Iter(#Combs'(a, Inst(bs), nextIter), Pair(a, b))
Inst(#Combs'(a, bs, nextIter)) -> Combs'(a, bs, nextIter)

MaxIter(EmptyIter) -> EmptyIterMaxError
MaxIter(Iter(next, val)) -> MaxIter'(Inst(next), val) 
MaxIter'(EmptyIter, max) -> max
MaxIter'(Iter(next, val), max) -> MaxIter'(Inst(next), If(>(val, max), val, max))

MapIter(EmptyIter, f) -> EmptyIter
MapIter(Iter(next, h), f) -> Iter(#MapIter(Inst(next), f), App(f, h))
Inst(#MapIter(it, f)) -> MapIter(it, f)

FilterIter(EmptyIter, pred) -> EmptyIter
FilterIter(Iter(next, h), pred) ->
    If(App(pred, h),
        Iter(#FilterIter(Inst(next), pred), h),
        #FilterIter(Inst(next), pred)
    )
Inst(#FilterIter(next, pred)) -> FilterIter(next, pred)

RangeIter(n) -> RangeIter'(n, 0)
RangeIter'(to, n) -> If(=(n, to), Iter(EmptyIter, to), Iter(#RangeIter'(to, +(n, 1)), n))
Inst(#RangeIter'(to, n)) -> RangeIter'(to, n)

RangeIter2(from, to) -> RangeIter2'(from, to)
RangeIter2'(n, to) -> If(=(n, to), Iter(EmptyIter, to), Iter(#RangeIter2'(+(n, 1), to), n))
Inst(#RangeIter2'(n, to)) -> RangeIter2'(n, to)

NthIter(it, n) -> NthIter'(it, n)
NthIter(EmptyIter, n) -> None
NthIter(Iter(next, h), 0) -> Some(h)
NthIter(Iter(next, h), n) -> NthIter(Inst(next), -(n, 1))

Euler1 -> Sum(Filter(Range(999), IsDivisibleBy3Or5))
Euler2 -> Sum(Filter(TakeWhile(Fib(0, 1), App(Lss, 4000000)), IsEven))
Euler3 -> Max(Factorize(600851475143))
Euler4 -> MaxIter(FilterIter(MapIter(CombinationsIter(RangeIter2(99, 999), RangeIter2(99, 999)), MultPair), IsPalindromic))